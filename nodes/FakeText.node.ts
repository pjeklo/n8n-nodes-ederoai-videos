import { IExecuteFunctions, INodeExecutionData, INodeType, INodeTypeDescription, NodeConnectionType } from 'n8n-workflow';

export class FakeText implements INodeType {
	description: INodeTypeDescription = {
		displayName: 'Create Fake Text Video',
		name: 'createFakeTextVideo',
		group: ['transform'],
		version: 1,
		description: 'Generate a fake text conversation video',
		defaults: {
			name: 'Create Fake Text Video',
		},
		inputs: [NodeConnectionType.Main],
		outputs: [NodeConnectionType.Main],
		credentials: [
			{
				name: 'videos-client',
				required: true,
			},
		],
		properties: [
			{
				displayName: 'Video Name',
				name: 'name',
				type: 'string',
				description: "A descriptive name for your fake text conversation video (e.g., 'Dating App Chat', 'Business Negotiation', 'Friend Drama')",
				required: true,
				default: '',
				typeOptions: {
					minValue: 1,
					maxLength: 255,
				},
			},
			{
				displayName: 'Message Template',
				name: 'template',
				type: 'options',
				description: 'Choose the messaging platform style for your conversation',
				required: true,
				default: 'iMessage',
				options: [
					{ name: 'iMessage', value: 'iMessage' },
					{ name: 'WhatsApp', value: 'whatsapp' },
					{ name: 'Instagram', value: 'instagram' },
					{ name: 'Tinder', value: 'tinder' },
				],
			},
			{
				displayName: 'Messages',
				name: 'messages',
				type: 'fixedCollection',
				description: 'Array of messages in the conversation. Each message can be text or media (photos/videos).',
				required: true,
				default: {},
				options: [
					{
						name: 'message',
						displayName: 'Message',
						values: [
							{
								displayName: 'Message Type',
								name: 'type',
								type: 'options',
								required: true,
								default: 'text',
								description: 'Type of message (text or media)',
								options: [
									{ name: 'Text Message', value: 'text' },
									{ name: 'Photo/Image', value: 'photo' },
									{ name: 'Video', value: 'video' },
								],
							},
							{
								displayName: 'Message Text',
								name: 'text',
								type: 'string',
								required: false,
								default: '',
								description: 'Text content of the message (required for text messages)',
								typeOptions: { maxLength: 1000 },
							},
							{
								displayName: 'Content Type',
								name: 'contentType',
								type: 'string',
								required: false,
								default: '',
								description: 'MIME type for media messages (e.g., image/jpeg, video/mp4)',
								typeOptions: { maxLength: 100 },
							},
							{
								displayName: 'Media URL',
								name: 'photoUrl',
								type: 'string',
								required: false,
								default: '',
								description: 'URL of the media file (for photo/video messages)',
							},
							{
								displayName: 'Media Width',
								name: 'width',
								type: 'number',
								required: false,
								default: 0,
								description: 'Width of the media in pixels',
								typeOptions: { minValue: 1, maxValue: 4000 },
							},
							{
								displayName: 'Media Height',
								name: 'height',
								type: 'number',
								required: false,
								default: 0,
								description: 'Height of the media in pixels',
								typeOptions: { minValue: 1, maxValue: 4000 },
							},
						],
					},
				],
			},
			{
				displayName: 'Voice Configuration',
				name: 'voiceSettings',
				type: 'collection',
				description: 'Configure the voice settings for text-to-speech generation of conversation messages',
				required: true,
				default: {},
				options: [
					{
						name: 'leftVoice',
						displayName: 'Left Person Voice',
						type: 'collection',
						required: true,
						description: 'Voice settings for the person on the left side of the conversation',
						default: {},
						options: [
							{
								displayName: 'Voice ID',
								name: 'voiceId',
								type: 'options',
								required: true,
								default: '',
								description: 'ElevenLabs voice ID for the left person',
								options: [
									{ name: 'Rachel (Female)', value: '21m00Tcm4TlvDq8ikWAM' },
									{ name: 'Domi (Female)', value: 'AZnzlk1XvdvUeBnXmlld' },
									{ name: 'Bella (Female)', value: 'EXAVITQu4vr4xnSDxMaL' },
									{ name: 'Josh (Male)', value: '21j0vfeTClDxlSDvGRl' },
									{ name: 'Arnold (Male)', value: 'VR6AewLTigWG4xSOukaG' },
									{ name: 'Adam (Male)', value: 'VR6AewLTigWG4xSOukaG' },
								],
							},
							{
								displayName: 'Voice Stability',
								name: 'stability',
								type: 'number',
								required: false,
								default: 0.4,
								description: 'Voice stability setting (0.0-1.0). Higher values = more stable but less expressive',
								typeOptions: { minValue: 0, maxValue: 1 },
							},
							{
								displayName: 'Similarity Boost',
								name: 'similarityBoost',
								type: 'number',
								required: false,
								default: 0.45,
								description: 'Voice similarity boost (0.0-1.0). Higher values = more similar to original voice',
								typeOptions: { minValue: 0, maxValue: 1 },
							},
							{
								displayName: 'Style Exaggeration',
								name: 'styleExaggeration',
								type: 'number',
								required: false,
								default: 0.5,
								description: 'Style exaggeration setting (0.0-1.0). Higher values = more dramatic style',
								typeOptions: { minValue: 0, maxValue: 1 },
							},
						],
					},
					{
						name: 'rightVoice',
						displayName: 'Right Person Voice',
						type: 'collection',
						required: true,
						description: 'Voice settings for the person on the right side of the conversation',
						default: {},
						options: [
							{
								displayName: 'Voice ID',
								name: 'voiceId',
								type: 'options',
								required: true,
								default: '',
								description: 'ElevenLabs voice ID for the right person',
								options: [
									{ name: 'Rachel (Female)', value: '21m00Tcm4TlvDq8ikWAM' },
									{ name: 'Domi (Female)', value: 'AZnzlk1XvdvUeBnXmlld' },
									{ name: 'Bella (Female)', value: 'EXAVITQu4vr4xnSDxMaL' },
									{ name: 'Josh (Male)', value: '21j0vfeTClDxlSDvGRl' },
									{ name: 'Arnold (Male)', value: 'VR6AewLTigWG4xSOukaG' },
									{ name: 'Adam (Male)', value: 'VR6AewLTigWG4xSOukaG' },
								],
							},
							{
								displayName: 'Voice Stability',
								name: 'stability',
								type: 'number',
								required: false,
								default: 0.4,
								description: 'Voice stability setting (0.0-1.0). Higher values = more stable but less expressive',
								typeOptions: { minValue: 0, maxValue: 1 },
							},
							{
								displayName: 'Similarity Boost',
								name: 'similarityBoost',
								type: 'number',
								required: false,
								default: 0.45,
								description: 'Voice similarity boost (0.0-1.0). Higher values = more similar to original voice',
								typeOptions: { minValue: 0, maxValue: 1 },
							},
							{
								displayName: 'Style Exaggeration',
								name: 'styleExaggeration',
								type: 'number',
								required: false,
								default: 0.5,
								description: 'Style exaggeration setting (0.0-1.0). Higher values = more dramatic style',
								typeOptions: { minValue: 0, maxValue: 1 },
							},
						],
					},
				],
			},
			{
				displayName: 'Theme',
				name: 'theme',
				type: 'options',
				description: 'Visual theme for the conversation interface',
				required: false,
				default: 'light',
				options: [
					{ name: 'Light', value: 'light' },
					{ name: 'Dark', value: 'dark' },
				],
			},
			{
				displayName: 'Message Gap (seconds)',
				name: 'messageGap',
				type: 'number',
				description: 'Time gap between messages in seconds (0.1-10 seconds)',
				required: false,
				default: 1.0,
				typeOptions: { minValue: 0.1, maxValue: 10 },
			},
			{
				displayName: 'Playback Speed',
				name: 'speed',
				type: 'number',
				description: 'Video playback speed multiplier (0.5-3.0x)',
				required: false,
				default: 1.0,
				typeOptions: { minValue: 0.5, maxValue: 3.0 },
			},
			{
				displayName: 'Emoji Style',
				name: 'emojiType',
				type: 'options',
				description: 'Emoji style to use in the conversation',
				required: false,
				default: 'apple',
				options: [
					{ name: 'Facebook', value: 'facebook' },
					{ name: 'Twitter', value: 'twitter' },
					{ name: 'Apple', value: 'apple' },
					{ name: 'Google', value: 'google' },
				],
			},
			{
				displayName: 'Contact Information',
				name: 'contactInfo',
				type: 'collection',
				description: 'Contact information to display in the conversation header',
				required: false,
				default: {},
				options: [
					{
						name: 'name',
						displayName: 'Contact Name',
						type: 'string',
						required: false,
						description: "Name of the contact (e.g., 'John Doe', 'Sarah Smith')",
						typeOptions: { maxLength: 100 },
						default: '',
					},
					{
						name: 'nickname',
						displayName: 'Nickname',
						type: 'string',
						required: false,
						description: "Nickname or display name (e.g., 'Johnny', 'Sara')",
						typeOptions: { maxLength: 50 },
						default: '',
					},
					{
						name: 'image',
						displayName: 'Profile Image URL',
						type: 'string',
						required: false,
						description: "URL of the contact's profile image",
						default: '',
					},
					{
						name: 'messageCount',
						displayName: 'Message Count',
						type: 'number',
						required: false,
						description: 'Number of messages in the conversation (0-10000)',
						typeOptions: { minValue: 0, maxValue: 10000 },
						default: 0,
					},
				],
			},
			{
				displayName: 'Typography Settings',
				name: 'typography',
				type: 'collection',
				description: 'Font and color settings for the conversation text',
				required: false,
				default: {},
				options: [
					{
						name: 'left',
						displayName: 'Left Person Typography',
						type: 'collection',
						description: 'Typography settings for the left person\'s messages',
						default: {},
						options: [
							{
								displayName: 'Font Family',
								name: 'font',
								type: 'string',
								required: false,
								description: 'Font family for left person\'s messages',
								typeOptions: { maxLength: 100 },
								default: '',
							},
							{
								displayName: 'Text Color',
								name: 'color',
								type: 'string',
								required: false,
								description: 'Text color for left person\'s messages',
								default: '',
							},
							{
								displayName: 'Font Size',
								name: 'fontSize',
								type: 'number',
								required: false,
								description: 'Font size in pixels (8-72px)',
								typeOptions: { minValue: 8, maxValue: 72 },
								default: 0,
							},
							{
								displayName: 'Background Color',
								name: 'backgroundColor',
								type: 'string',
								required: false,
								description: 'Message bubble background color for left person',
								default: '',
							},
						],
					},
					{
						name: 'right',
						displayName: 'Right Person Typography',
						type: 'collection',
						description: 'Typography settings for the right person\'s messages',
						default: {},
						options: [
							{
								displayName: 'Font Family',
								name: 'font',
								type: 'string',
								required: false,
								description: 'Font family for right person\'s messages',
								typeOptions: { maxLength: 100 },
								default: '',
							},
							{
								displayName: 'Text Color',
								name: 'color',
								type: 'string',
								required: false,
								description: 'Text color for right person\'s messages',
								default: '',
							},
							{
								displayName: 'Font Size',
								name: 'fontSize',
								type: 'number',
								required: false,
								description: 'Font size in pixels (8-72px)',
								typeOptions: { minValue: 8, maxValue: 72 },
								default: 0,
							},
							{
								displayName: 'Background Color',
								name: 'backgroundColor',
								type: 'string',
								required: false,
								description: 'Message bubble background color for right person',
								default: '',
							},
						],
					},
				],
			},
			{
				displayName: 'Background Configuration',
				name: 'backgroundSettings',
				type: 'collection',
				description: 'Configure the video background (optional - uses default if not specified)',
				required: false,
				default: {},
				options: [
					{
						name: 'type',
						displayName: 'Background Type',
						type: 'options',
						required: false,
						default: 'default',
						description: 'Type of background to use for the video',
						options: [
							{ name: 'Default Background', value: 'default' },
							{ name: 'Preset Background', value: 'preset' },
							{ name: 'Custom Background', value: 'custom' },
							{ name: 'Upload Background', value: 'upload' },
							{ name: 'AI Generated Background', value: 'generated' },
						],
					},
					{
						name: 'presetPrompt',
						displayName: 'Preset Prompt',
						type: 'string',
						required: false,
						description: "Used when background type is 'preset'",
						typeOptions: { maxLength: 200 },
						default: '',
					},
					{
						name: 'customPrompt',
						displayName: 'Custom Prompt',
						type: 'string',
						required: false,
						description: "Used when background type is 'custom'",
						typeOptions: { maxLength: 200 },
						default: '',
					},
					{
						name: 'selectedBackgroundId',
						displayName: 'Selected Background ID',
						type: 'string',
						required: false,
						description: 'ID of pre-selected background',
						typeOptions: { maxLength: 100 },
						default: '',
					},
					{
						name: 'uploadedFileUrl',
						displayName: 'Uploaded File URL',
						type: 'string',
						required: false,
						description: 'URL of uploaded background image',
						default: '',
					},
					{
						name: 'uploadedFile',
						displayName: 'Upload Background File',
						type: 'string',
						required: false,
						description: 'Upload background image file',
						default: '',
					},
					{
						name: 'prompt',
						displayName: 'Background Generation Prompt',
						type: 'string',
						required: false,
						description: 'Prompt for AI background generation',
						typeOptions: { minValue: 5, maxValue: 500 },
						default: '',
					},
				],
			},
		],
	};

	async execute(this: IExecuteFunctions): Promise<INodeExecutionData[][]> {
		const items = this.getInputData();
		const returnData: INodeExecutionData[] = [];
		const credentials = await this.getCredentials('videos-client');
		const BASE_URL = 'https://app.edero.ai/api/public';

		for (let i = 0; i < items.length; i++) {
			// You would need to transform the n8n parameters into the correct API body here
			const body = this.getNodeParameter('name', i);
			// ... build the body from all parameters ...
			const response = await this.helpers.request({
				method: 'POST' as const,
				url: `${BASE_URL}/fake-text`,
				headers: {
					'Authorization': `Bearer ${credentials.apiKey}`,
					'Content-Type': 'application/json',
				},
				body,
				json: true,
			});
			returnData.push({ json: response });
		}
		return [returnData];
	}
} 